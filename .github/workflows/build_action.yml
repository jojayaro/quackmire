name: Build and Release
on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  PROJECT_NAME: quackmire

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: win-amd64
            runner: windows-latest
            target: x86_64-pc-windows-msvc
          - name: macos-amd64
            runner: macos-latest
            target: x86_64-apple-darwin
          - name: macos-arm64
            runner: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2

      - name: Build Binary
        run: cargo build --verbose --locked --release --target ${{ matrix.target }}

      - name: Package Binary
        shell: bash
        run: |
          BIN_SUFFIX=""
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".exe"
          fi

          BIN_OUTPUT="target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"
          BIN_RELEASE="${PROJECT_NAME}-${{ github.ref_name }}-${{ matrix.name }}${BIN_SUFFIX}"

          mkdir -p releases
          mv "${BIN_OUTPUT}" "./releases/${BIN_RELEASE}"

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: ./releases/${PROJECT_NAME}-${{ github.ref_name }}-${{ matrix.name }}${{ runner.os == 'Windows' && '.exe' || '' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: ./binaries

      - name: Create Release
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs').promises;
            const { repo: { owner, repo }, ref } = context;
            const tag = ref.replace('refs/tags/', '');

            // Create the release
            const { data: release } = await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tag,
              name: `Release ${tag}`,
              draft: false,
              prerelease: false
            });

            // Upload each asset
            const binaries = await fs.readdir('./binaries');
            for (const binary of binaries) {
              const filePath = `./binaries/${binary}`;
              const fileContent = await fs.readFile(filePath);

              await github.rest.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id: release.id,
                name: binary,
                data: fileContent
              });

              console.log(`Uploaded ${binary}`);
            }
