name: Build
on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  PROJECT_NAME: quackmire

jobs:
  build:
    runs-on: ${{ matrix.runner }}

    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: win-amd64
            runner: windows-latest
            target: x86_64-pc-windows-msvc
          - name: macos-amd64
            runner: macos-latest
            target: x86_64-apple-darwin
          - name: macos-arm64
            runner: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2

      - name: Build Binary
        run: cargo build --verbose --locked --release --target ${{ matrix.target }}

      - name: Package Binary
        shell: bash
        run: |
          BIN_SUFFIX=""
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".exe"
          fi

          BIN_OUTPUT="target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"
          BIN_RELEASE="${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}"

          mkdir -p releases
          mv "${BIN_OUTPUT}" "./releases/${BIN_RELEASE}"

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}-binary
          path: ./releases/${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store Release URL
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

      - name: Upload Release URL
        uses: actions/upload-artifact@v3
        with:
          name: release_url
          path: release_url.txt

  upload-release-assets:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: linux-amd64
          - name: win-amd64
          - name: macos-amd64
          - name: macos-arm64

    steps:
      - name: Download Release URL
        uses: actions/download-artifact@v3
        with:
          name: release_url

      - name: Get Release URL
        id: get_release_url
        run: |
          echo "::set-output name=release_url::$(cat release_url.txt)"

      - name: Download Binary
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.name }}-binary

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_url.outputs.release_url }}
          asset_path: ./${{ env.PROJECT_NAME }}-${{ matrix.name }}${{ matrix.name == 'win-amd64' && '.exe' || '' }}
          asset_name: ${{ env.PROJECT_NAME }}-${{ matrix.name }}-${{ github.ref_name }}${{ matrix.name == 'win-amd64' && '.exe' || '' }}
          asset_content_type: application/octet-stream
