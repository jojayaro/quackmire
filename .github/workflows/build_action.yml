name: Build
on: [push]
env:
  PROJECT_NAME: quackmire
jobs:
  build:
    runs-on: ${{ matrix.runner }}
 
    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: win-amd64
            runner: windows-latest
            target: x86_64-pc-windows-msvc
          - name: macos-amd64
            runner: macos-latest
            target: x86_64-apple-darwin
          - name: macos-arm64
            runner: macos-latest
            target: aarch64-apple-darwin
 
    steps:
      - name: Checkout
        uses: actions/checkout@v4
 
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"
 
      - name: Setup Cache
        uses: Swatinem/rust-cache@v2
 
      - name: Build Binary
        run: cargo build --verbose --locked --release --target ${{ matrix.target }}
 
      - name: Release Binary
        shell: bash
        run: |
          BIN_SUFFIX=""
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".exe"
          fi
 
          # The built binary output location
          BIN_OUTPUT="target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"
 
          # Define a better name for the final binary
          BIN_RELEASE="${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}"
          BIN_RELEASE_VERSIONED="${PROJECT_NAME}-${{ github.ref_name }}-${{ matrix.name }}${BIN_SUFFIX}"
 
          # Create the releases directory if it doesn't exist
          mkdir -p releases

          # Move the built binary to the releases directory
          mv "${BIN_OUTPUT}" "./releases/${BIN_RELEASE}"
      
      - name: Upload Release Binary
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}-binary
          path: ./releases/${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Binary to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./releases/${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}
          asset_name: ${{ PROJECT_NAME }}-${{ matrix.name }}-${{ github.ref_name }}${BIN_SUFFIX}
          asset_content_type: application/octet-stream
